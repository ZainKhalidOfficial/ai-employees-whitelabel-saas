"use client"

import { useCompletion} from "ai/react";
import { useRouter } from "next/navigation";
import { FormEvent, useState } from "react";
import { ExpertChatHeader } from "@/components/expert-chat-header";
import { Companion, Message } from "@prisma/client"
import exp from "constants";
import { ExpertChatForm } from "@/components/expert-chat-form";
import { ExpertChatMessages } from "@/components/expert-chat-messages";
import { ExpertChatMessageProps } from "@/components/expert-chat-message";

interface ExpertChatClientProps {
    expert: Companion & {
        messages: Message[];
        _count: {
            messages: number;
        };
    };
};

export const ExpertChatClient = ({
    expert
}: ExpertChatClientProps) => {
    
    const router = useRouter(); 
    const [messages, setMessages] = useState<ExpertChatMessageProps[]>(expert.messages)

    const {
        input,
        isLoading,
        handleInputChange,
        handleSubmit,
        setInput,
    } = useCompletion({
        api: `/api/expertChat/${expert.id}`,
        onFinish(prompt, completion) {
            const systemMessage: ExpertChatMessageProps = {
                role: 'system',
                content: completion,
            };

            setMessages((current) => [...current, systemMessage]);
            setInput("");

            router.refresh();
        },
    });

    const onSubmit = (e: FormEvent<HTMLFormElement>) => {
        const userMessage: ExpertChatMessageProps = {
            role: 'user',
            content: input,
        };

        setMessages((current) => [...current, userMessage]);

        handleSubmit(e);
    }

    return (
        <div className="flex flex-col p-4 space-y-2 h-full">
            <ExpertChatHeader expert={expert} />

            <ExpertChatForm
                isLoading={isLoading}
                input={input}
                handleInputChange={handleInputChange}
                onSubmit={onSubmit}
            />

            <ExpertChatMessages
                expert={expert}
                isLoading={isLoading}
                messages={messages}
            />

         
        </div>
    )
}